<?php

/**
 * @file
 * Redirect denied pages to the user login form.
 */

/**
 * Implementation of hook_menu().
 */
function r4032login_menu() {
  $items = array();
  $items['r4032login'] = array(
    'page callback' => 'r4032login_redirect',
    'access callback' => 'r4032login_access',
    'type' => MENU_CALLBACK
  );
  $items['admin/settings/r4032login'] = array(
    'title' => 'Redirect 403 to User Login',
    'description' => 'Toggle display of denied message on login page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('r4032login_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration')
  );
  return $items;
}

/**
 * Without an access callback on the menu item for r4032login_redirect,
 * the redirect will be 403 and just have the default access denied page anyway.
 */
function r4032login_access() {
  return TRUE;
}

function r4032login_admin_settings() {
  $form = array();
  $form['r4032login_display_denied_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Display access denied message on login page'),
    '#default_value' => variable_get('r4032login_display_denied_message', 'Access denied. You must login to view this page.')
  );
  $form['r4032login_user_register_message'] = array(
    '#type' => 'textfield',
    '#title' => t('User register message'),
    '#description' => t('The message to display when a logged-in user tries to register another account through the !new_account. Drupal does not allow it, so regular users must log out first. Administrators should create new users in !link.', array('!new_account' => l(t('new account registration form'), 'user/register'), '!link' => l(t('User management'), 'admin/user/user/create'))),
    '#default_value' => variable_get('r4032login_user_register_message', t('You are not authorized to access this page.'))
  );
  $form['r4032login_redirect_authenticated_users_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Rediect authenticated users to'),
    '#description' => t('If an authenticated user tries to access a page they can not, redirect them to the given page. Use &lt;front&gt; for the front page, leave blank for the default access denied page.'),
    '#default_value' => variable_get('r4032login_redirect_authenticated_users_to', ''),
  );
  $form['r4032login_user_login_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to user login form'),
    '#description' => t('The path to the user login form. Omit the beginning slash, ie: user/login'),
    '#default_value' => variable_get('r4032login_user_login_path', 'user/login'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function r4032login_theme() {
  return array(
    'r4032login_denied' => array(
      'arguments' => array()
    ),
    'r4032login_user_register' => array(
      'arguments' => array()
    )
  );
}

/**
 * MENU_CALLBACK for /4032login
 *
 * Redirect anonymous users from 403 Access Denied pages to the /user/login page
 * with a message explaining that they must login to view the requested page
 * and a query string parameter appended to the url to return after login.
 */
function r4032login_redirect() {
  global $user;
  $redirect = variable_get('r4032login_redirect_authenticated_users_to', '');
  if (user_is_anonymous()) {
    // Only display the message if there is one.
    $message = variable_get('r4032login_display_denied_message', 'Access denied. You must login to view this page.');
    if (!empty($message)) {
      drupal_set_message(t($message), 'error');
    }
    // Check for path prefix and strip it out if its found.
    // using drupal_goto() with destination set causes a recursive redirect loop
    $login_path = variable_get('r4032login_user_login_path', 'user/login');
    header('Location: ' . url($login_path, array('query' => _r4032login_destination(), 'absolute' => TRUE)), TRUE, 302);
    drupal_exit();
  }
  elseif (!empty($redirect)) {
    header('Location: ' . url($redirect));
    drupal_exit();
  }
  // checking arg() returns r4032login
  elseif ($_REQUEST['q'] == 'user/register') {
    return theme('r4032login_user_register');
  }
  else {
    return theme('r4032login_denied');
  }
}

/**
 * Version of drupal_get_destination which works inside of a 403 callback
 *
 */
function _r4032login_destination() {
  // decode URL to prevent double-encoding https://drupal.org/node/1403616
  $destination = urldecode(request_uri());

  // Remove basepath
  global $base_path;
  if (strpos($destination, $base_path) === 0) {
    $destination = substr($destination, strlen($base_path));
  }  

  if (!variable_get('clean_url', 0)) {
    // Clean URLs disabled, so break apart the query string and
    // pull out the path.
    $destination = parse_url($destination);
    $queryarray = explode('&', $destination['query']);
    $path = str_replace('q=', '', $queryarray[0]);
    unset($queryarray[0]);
    $query = !empty($queryarray) ? '?' . implode('&', $queryarray) : '';
    $destination = $path . $query;
  }

  // If the language path prefixing is enabled remove it from the path.
  if (variable_get('language_negotiation', FALSE)) {
    $args = explode('/', $destination);
    $prefix = array_shift($args);

    // Search prefix within enabled languages.
    $languages = language_list('enabled');
    foreach ($languages[1] as $language) {
      if (!empty($language->prefix) && $language->prefix == $prefix) {
        // Found a match, rebuild the path without the language.
        $destination = implode('/', $args);
        break;
      }
    }
  }

  return 'destination=' . urlencode($destination);
}

function theme_r4032login_denied() {
  drupal_set_title(t('Access denied'));
  return '<p>' . t('You are not authorized to access this page.') . '</p>';
}

function theme_r4032login_user_register() {
  drupal_set_title(t('Access denied'));
  $message = variable_get('r4032login_user_register_message', 'You are not authorized to access this page.');
  return '<p>' . t($message) . '</p>';
}
